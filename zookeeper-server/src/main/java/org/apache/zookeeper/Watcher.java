/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zookeeper;

import org.apache.yetus.audience.InterfaceAudience;

/**
 * This interface specifies the public interface an event handler class must
 * implement. A ZooKeeper client will get various events from the ZooKeeper
 * server it connects to. An application using such a client handles these
 * events by registering a callback object with the client. The callback object
 * is expected to be an instance of a class that implements Watcher interface.
 * 此接口指定事件处理程序类必须实现的公共接口。 ZooKeeper客户端将从它连接的ZooKeeper 服务器获取各种事件。
 * 使用此类客户端的应用程序通过向客户端注册回调对象来处理这些事件。回调对象应该是实现Watcher接口的类的实例。
 *
 * Watcher，接口类型，其定义了process方法，需子类实现。
 *
 * WatcherType，枚举类型，Watcher的内部类，列举了watchers的类型。
 *
 * Event，接口类型，Watcher的内部类，无任何方法。
 *
 * KeeperState，枚举类型，Event的内部类，表示Zookeeper所处的状态。
 *
 * EventType，枚举类型，Event的内部类，表示Zookeeper中发生的事件类型。
 *
 * Watcher的意义，通知状态(keeperState)与事件类型(EventType)
 * WatchedEvent 和 WatcherEvent 描述zk检测到变化的事件，以及对应用于网络传输的封装类
 * ClientWatchManager接口以及实现类ZKWatchManager :client端完成根据Event找到需要触发的watches
 * WatcherSetEventPair 将Event以及对应需要触发的watches集合进行组合绑定
 */
@InterfaceAudience.Public
public interface Watcher {

    /**
     * This interface defines the possible states an Event may represent
     *
     */
    @InterfaceAudience.Public
    public interface Event {
        /**
         * Enumeration of states the ZooKeeper may be at the event
         * 事件发生时Zookeeper的状态
         */
        @InterfaceAudience.Public
        public enum KeeperState {
            /** Unused, this state is never generated by the server */
            //未使用，此状态永远不会由服务器生成
            @Deprecated
            Unknown (-1),

            /** The client is in the disconnected state - it is not connected
             * to any server in the ensemble. */
            // 客户端与服务端处于断开连接状态 - 它没有连接到zookeeper中的任何服务器。
            Disconnected (0),

            /** Unused, this state is never generated by the server */
            // 未同步连接，不再使用，服务器不会产生此状态
            @Deprecated
            NoSyncConnected (1),

            /** The client is in the connected state - it is connected
             * to a server in the ensemble (one of the servers specified
             * in the host connection parameter during ZooKeeper client
             * creation). */
            // 客户端处于连接状态 - 它连接到集合中的服务器（在ZooKeeper客户端创建期间在主机连接参数中指定的服务器之一）。
            SyncConnected (3),

            /**
             * Auth failed state
             */
            // 认证失败状态
            AuthFailed (4),

            /**
             * The client is connected to a read-only server, that is the
             * server which is not currently connected to the majority.
             * The only operations allowed after receiving this state is
             * read operations.
             * This state is generated for read-only clients only since
             * read/write clients aren't allowed to connect to r/o servers.
             */
            // 只读连接状态
            ConnectedReadOnly (5),

            /**
              * SaslAuthenticated: used to notify clients that they are SASL-authenticated,
              * so that they can perform Zookeeper actions with their SASL-authorized permissions.
              */
            // SASL认证通过状态
            SaslAuthenticated(6),

            /** The serving cluster has expired this session. The ZooKeeper
             * client connection (the session) is no longer valid. You must
             * create a new client connection (instantiate a new ZooKeeper
             * instance) if you with to access the ensemble. */
            // 过期状态
            Expired (-112),
            
            /** 
             * The client has been closed. This state is never generated by
             * the server, but is generated locally when a client calls
             * {@link ZooKeeper#close()} or {@link ZooKeeper#close(int)}
             */
            // 客户已经关闭。此状态永远不会由*服务器生成，
            // 而是在客户端调用{@link ZooKeeper #close（）}或{@link ZooKeeper #close（int）}时在本地生成
            Closed (7);

            // 代表状态的Int值
            private final int intValue;     // Integer representation of value for sending over wire
                                            // 通过线路发送的值的整数表示

            KeeperState(int intValue) {
                this.intValue = intValue;
            }

            public int getIntValue() {
                return intValue;
            }

            // 从Int构造相应的状态
            public static KeeperState fromInt(int intValue) {
                switch(intValue) {
                    case   -1: return KeeperState.Unknown;
                    case    0: return KeeperState.Disconnected;
                    case    1: return KeeperState.NoSyncConnected;
                    case    3: return KeeperState.SyncConnected;
                    case    4: return KeeperState.AuthFailed;
                    case    5: return KeeperState.ConnectedReadOnly;
                    case    6: return KeeperState.SaslAuthenticated;
                    case -112: return KeeperState.Expired;
                    case   7: return KeeperState.Closed;

                    default:
                        throw new RuntimeException("Invalid integer value for conversion to KeeperState");
                }
            }
        }

        /**
         * Enumeration of types of events that may occur on the ZooKeeper
         * // 事件类型
         */
        @InterfaceAudience.Public
        public enum EventType {
            // 无
            None (-1),
            // 结点创建
            NodeCreated (1),
            // 结点删除
            NodeDeleted (2),
            // 结点数据变化
            NodeDataChanged (3),
            // 结点子节点变化
            NodeChildrenChanged (4),

            DataWatchRemoved (5),

            ChildWatchRemoved (6);

            private final int intValue;     // Integer representation of value
                                            // for sending over wire

            EventType(int intValue) {
                this.intValue = intValue;
            }

            public int getIntValue() {
                return intValue;
            }

            public static EventType fromInt(int intValue) {
                switch(intValue) {
                    case -1: return EventType.None;
                    case  1: return EventType.NodeCreated;
                    case  2: return EventType.NodeDeleted;
                    case  3: return EventType.NodeDataChanged;
                    case  4: return EventType.NodeChildrenChanged;
                    case  5: return EventType.DataWatchRemoved;
                    case  6: return EventType.ChildWatchRemoved;

                    default:
                        throw new RuntimeException("Invalid integer value for conversion to EventType");
                }
            }           
        }
    }

    /**
     * Enumeration of types of watchers
     * 列举了watchers的类型
     */
    @InterfaceAudience.Public
    public enum WatcherType {
        Children(1), Data(2), Any(3);

        // Integer representation of value
        private final int intValue;

        private WatcherType(int intValue) {
            this.intValue = intValue;
        }

        public int getIntValue() {
            return intValue;
        }

        public static WatcherType fromInt(int intValue) {
            switch (intValue) {
            case 1:
                return WatcherType.Children;
            case 2:
                return WatcherType.Data;
            case 3:
                return WatcherType.Any;

            default:
                throw new RuntimeException(
                        "Invalid integer value for conversion to WatcherType");
            }
        }
    }
    // 不同watch都会实现自己的回调方法来执行它
    // 其代表了实现Watcher接口时必须实现的的方法，即定义进行处理，WatchedEvent表示观察的事件。
    //回调函数实现该函数，表示根据event执行的行为
    abstract public void process(WatchedEvent event);
}
